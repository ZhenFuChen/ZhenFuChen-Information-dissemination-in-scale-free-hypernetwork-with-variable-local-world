#coding=gbk
import random
import numpy as np
import hypernetx as hnx
from scipy import integrate
from scipy.optimize import fsolve
from matplotlib import pyplot as plt

class InfoSpreading(object):
    def funRun(self):
        self.m1 = 3
        self.m2 = 3
        self.m = 3
        self.gamma = 0.3
        self.yvalue = []

        for beta in range(1,21):
            self.beta = beta/100

            # 使用fsolve函数求解方程
            xita = fsolve(self.equation, 0.5, xtol=1e-6)[0]

            rho = (self.m * (self.m1 + self.m2) * (self.m1 + self.m2 - 1) * self.beta * xita * (1 - xita)) / (self.gamma * self.m1)

            # print("近似解θ:", xita)
            self.yvalue.append(rho)
            print("密度ρ:", rho)
        print(self.yvalue)

    # 定义被积函数
    def integrand(self, k, x):
        return (1 / (k ** (self.m1 / self.m2))) * (1 / (self.gamma + self.beta * (self.m1 + self.m2 - 1) * k * x))

    # 定义方程
    def equation(self, x):
        result, error = integrate.quad(self.integrand, self.m, float('inf'), args=(x,))
        return result - self.m2 / (self.m1 * (self.m ** (self.m1 / self.m2)) * self.beta * (self.m1 + self.m2 - 1))

    def draw(self):
        t = [i / 100 for i in range(0, 21)]
        t1 = [0.0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18,
         0.19, 0.20]

        # yvalue:0,1,2为理论值,3,4,5为仿真结果
        yvalue0 = [0.0,0.6258459876151803, 0.7958521975813403, 0.8599538205098124, 0.8934649872436867, 0.914046875794284, 0.9279678809803443, 0.9380098287389949, 0.9455952894680392, 0.9515271799345282, 0.9562929497738378, 0.9602056314129417, 0.9634754348086161, 0.966248756383784, 0.968630683243784, 0.970698602247177, 0.9725107619966585, 0.9741118441969131, 0.9755366959587479, 0.9768128943065562, 0.9779625480273901]
        yvalue1 = [0.0,0.2742250074017873, 0.5258459876151803, 0.6355490125535774, 0.6958521975813403, 0.7338498854313522, 0.7599538205098124, 0.7789823967167537, 0.7934649872436867, 0.8048551095968465, 0.814046875794284, 0.8216202721584958, 0.8279678809803443, 0.8333648734284452, 0.8380098287389949, 0.8420496382990995, 0.8455952894680392, 0.8487322003133947, 0.8515271799345282, 0.854033233112301, 0.8562929497738378]
        yvalue2 = [0.0,0.1250441955316834, 0.3365596390617211, 0.4758459876151802, 0.5567841585776313, 0.6192220895270408, 0.6458521975813395, 0.6728523790128921, 0.6935659410352205, 0.709953820509814, 0.7232401310440314, 0.7342277826556365, 0.7434649872436834, 0.7513386903258155, 0.7581297386273652, 0.7640468757942901, 0.7692484661320849, 0.773856816916785, 0.7779678809803465, 0.781657988196931, 0.7849886151441646]

        yvalue3 = [0.0, 0.419317, 0.684304, 0.801128, 0.8456149999999999, 0.887611, 0.8973839999999999, 0.9030382033, 0.90803729999999999, 0.91522040000000003, 0.92030379999999999, 0.922227, 0.92400923, 0.9236319999999999, 0.92463069999999999, 0.92690350000000001, 0.9364273, 0.9369940000000001, 0.9370899999999998, 0.9369059999999999, 0.9369453]
        yvalue4 = [0.0, 0.22029200000000002, 0.42065600000000005, 0.602449, 0.675474, 0.6856789999999998, 0.6933649999999998, 0.7543839999999998, 0.7597630000000002, 0.768824, 0.791344, 0.8065249999999999, 0.810322, 0.8138299999999999, 0.817764, 0.8120319999999999, 0.8219219999999999, 0.824218, 0.8256229999999999, 0.826999, 0.8275410000000001]
        yvalue5 = [0.0, 0.090054, 0.26620300000000002, 0.40317700000000003, 0.52472099999999987, 0.5469590000000001, 0.6355339999999999, 0.624225, 0.681395, 0.6873490000000001, 0.7117119999999999, 0.7282650000000002, 0.727019, 0.7395179999999999, 0.7367699999999999, 0.748732, 0.7513889999999999, 0.7540930000000001, 0.7558259999999999, 0.7579830000000001, 0.759926]

        xlable = [0, 0.1, 0.2, 0.3, 0.4]
        fig, ax = plt.subplots(1, 1, figsize=(10, 8))
        plt.xticks(xlable)
        # plt.xlabel("β", fontsize=15)
        # plt.ylabel("ρ", fontsize=15)

        plt.scatter(t1, yvalue3, marker="o", s=40, color='#1f77b4')
        plt.scatter(t1, yvalue4, marker="s", s=40, color='#ff7f0e')
        plt.scatter(t1, yvalue5, marker="X", s=40, color='#0ca022')
        plt.plot(t, yvalue0, "-", color='#1f77b4')
        plt.plot(t, yvalue1, "-", color='#ff7f0e')
        plt.plot(t, yvalue2, "-", color='#0ca022')

        ax.legend(labels=[r"$\gamma=0.1$", r"$\gamma=0.2$", r"$\gamma=0.3$",
                          r"theoretical", r"theoretical", r"theoretical"], ncol=1, fontsize=20)
        plt.xlabel("β", fontsize=25)
        plt.ylabel("ρ", fontsize=25)
        plt.xticks(fontsize=20)
        plt.yticks(fontsize=20)
        plt.tick_params(width=1.5)  # 修改刻度线线粗细width参数
        ax.spines['bottom'].set_linewidth(1.5)  ###设置底部坐标轴的粗细
        ax.spines['left'].set_linewidth(1.5)  ####设置左边坐标轴的粗细
        ax.spines['right'].set_linewidth(1.5)  ###设置右边坐标轴的粗细
        ax.spines['top'].set_linewidth(1.5)

        #plt.savefig("img.svg", format='svg', dpi=600)  # svg格式
        plt.show()

if __name__ == '__main__':
    infospr = InfoSpreading()
    infospr.draw()
    # infospr.funRun()
